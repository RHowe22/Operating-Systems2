		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Harshita Girase <hvgirase@buffalo.edu>
Douglas Achkar 	<dachkar@buffalo.edu>
Robert Howe	<rjhowe@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

  When starting a process, process_execute() causes start_process() to run 
  which calls load() all in process.c. In load() we start tokenizing the file_name 
  parameter by calling strtok_r() once and using " " as our delemiter. We call it 
  once initially and then create an integer which indicates the number of arguments 
  which we set that to 1 initially. Then we pass in the first token 
  (i.e. argv[0]/executable name) to filesys_open to open the executable. Then after 
  setup_stack() returns successfully,decrement the the stack pointer by the length 
  of string in the token including the null terminator and write that string to the stack.

  We then continue to tokenize the rest of the string, incrementing the arguement count, 
  moving the stackpointer down, and writing strings to the stack. After passing the arguements 
  onto the stack, we will create a second pointer that will point to the current position of 
  the stack pointer. Then we will decrement the stack pointer to the next address that is 
  divisible by 4 for word padding, adding null termintators as it is pushed down, and then push 
  down another 8 null terminating chars to set argv[argc] to a null pointer. 
  
  Once this is done, we will then start pushing the stack pointer down four bytes and write 
  the address of the first char of each arguement pushed on to the stack, using the second 
  pointer to find and keep track of where these arguements are. Once the address of 
  the arguments have been written onto the stack, we will then write the address of where argv0 
  was on the stack (i.e. previous addresses pushed onto the stack) and push that onto the stack 
  and push the arg count as a 4 byte value and push a fake return address of 0 on to the stack.
  
  To avoid overflowing the stack page we keep track of the stack pointer as it is decremented to 
  ensure that it never reaches 4kB below PHYSBASE.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() is the reentrant version of strtok() which means that this 
function can be called from multiple threads simultaneously. 
strtok_r() takes an extra argument which is used to store state between calls 
instead of using a global variable. (aka thread-safe)
strtok() uses global states so if by any chance we call it from more than one
thread, it might crash.


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

- Less work in the kernel thus, simplifies it.
- If you want to change how the arguments are being passed, it is easier to modify it 
in the user space than kernel space. 



			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
 
 In threads.h 

 struct fileDescriptor {
	 struct file * openfile;  // refrerence to open file
	 int FDval;     // actual file descriptor for the file
 };

 The purpose of this struct is to allow for a key-value pairing between 
 open files and their file descriptor for a particular process.

Members added to struct thread in threads.h 

	fileDescriptor [128] openfiles;  // allows for a process to have upto
	// 128 open files to keep track of
	int numFD; // number of current open files the process has
	
	int nexFileDescriptor; // used for determining the next FDVal
	// to be used when opening a file


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

 file descriptors are stored as a key value pair between that actual file
 descriptor and the file pointer to the open
 file descriptors are unique within a single process so as to prevent
 race conditions between multiple processes trying to open files.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

	For reading and writing user data, the process will first check if it
	has a file descriptor for the one passed as an arguement or if the 
	file descriptor is 0 for read, or 1 for write. If it does not have this
	descriptor, then it returns with an error otherwise it checks if the
	buffer[0] up to buffer[size-1] is mapped to that process. If that is
	false, then it throws with an error, then the process reads from or 
	writes SIZE bytes to the file or upto the end of the file.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

	For both of these scenarios, the least number of inspections of the 
	page table is two for checking if the start of the data that is copied 
	is mapped and has a valid user address. The most will be 4 for checking 
	if the end of this data will still be valid. We don't believe that there 
	will much more room for improving this as both of these checks must
	happen to validate the entirety of the data that is to be copied.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

	In our implementation, every process stores information on the children
  	it spawned including the child's PID, it's status (ie. if it's dead or not)
  	if this process has already called wait on it, and its exit status and 
	if it was killed. The child will be responsible for updating its status 
	and its exit status for the parent.
  	With that in mind, implementation of wait() first checks to see if the 
	process that the current process wishes to wait on is its child. If that 
	returns true, then it checks if it has already called wait() on that child.
	If that returns false, it then blocks itself until that child indicates to 
	its parent that child has died and exited, which that child process updates 
	when it terminates.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

   When dealing with pointers, there could be a possiblity that we are 
   dereferencing a NULL pointer. So we need to make sure that we are 
   validating every pointer to ensure that every pointer refers to a 
   valid memory address. 

   When handling system calls, there could be a possibility that the 
   arguments could be wrong or the syscall number could be wrong.
   For example, in the case of the read syscall, we need to ensure that
   the file descriptor is valid, the pointer (buffer) is dereferenced and 
   the length is valid i.e. not negative. If all three arguments are not
   valid, it will terminate the process.


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
 
   Our code ensures that the exec will not return before the new executable
   has completed loading as it waits to return the tid returned by process_execute()
   and the return of that function will indicate the success of the load 
   to the calling thread.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

Before C exists: 
Process P will be blocked until C actually exits. 

After C exists:
The kernel will turn C into a "zombie" but still continue to use
resources. The kernel will still have some information about C so 
that P can call wait later.

When P terminates without waiting, before C exits:
C will be abandoned (also known as orphaned) and will take up more resources
until C is matched with init. Init will eventually perform the wait system call for
C until it exits.

When P terminates after C exits:




---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

we chose to implement access to user memory from the kernel the way we
did as it provided to be a simpler approach by verifying that the address 
that was passed was a valid (non-NULL and in user space) physical or virtual
before executing the syscall or killing the process than other implementations
we found.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

 potential disadvantages is that as file descriptors are stored in a list
 in a process finding file descriptors for the process may be slow. 

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?